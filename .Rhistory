Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
#' Forecast the Yield of Crop.
#'@param crop Enter the Crop name
#'@param location Enter the Location where crop is present.
#'@param landsize Enter the land Size..
#'@get /value
#'@json
function(crop , location , landsize) {
landsize <- as.numeric(landsize)
newvalue = data.frame(crop,location,landsize)
if(newvalue$crop %in% unique_crop_name){
test(newvalue)
}
else{
print("Incorrect crop name or location")
}
}
#Creating different data frame and model for different crop.
for(i in unique(scaled_data$crop_name)){
assign(paste("crop_name_",paste(i),sep = ""),subset.data.frame(scaled_data, crop_name == paste(i)))
assign(paste("model_",paste(i),sep = ""),lm(myForm, data = subset.data.frame(scaled_data, crop_name == paste(i))))
}
test <- function(newvalue){
input_value <- newvalue
input_query <- scaled_data[crop_name == input_value$crop,]
set.seed(100)
test_query <- input_query[sample(nrow(input_query),1)]
# test_query$start_date <- sample(input_query$start_date,1)
# test_query$end_date <- sample(input_query$end_date,1)
# test_query$crop_name <- input_value$crop
# test_query$total_geofenced_area <- sample(input_query$total_geofenced_area,1)
# test_query$nitrogen <- sample(input_query$nitrogen,1)
# test_query$phosphorous <- sample(input_query$phosphorous,1)
# test_query$potassiom <- sample(input_query$potassiom,1)
# test_query$moisture <- sample(input_query$moisture,1)
# test_query$longitude <- sample(input_query$longitude,1)
# test_query$latitude <- sample(input_query$latitude,1)
# test_query$Total_Area <- sample(input_query$Total_Area,1)
# test_query$temperatureMin <- sample(input_query$temperatureMin,1)
# test_query$temperatureMax <- sample(input_query$temperatureMax,1)
# test_query$visibilty <- sample(input_query$visibilty,1)
# test_query$precipIntensity <- sample(input_query$precipIntensity,1)
test_query$Yield_Generated <- NULL
test_query$Total_Area <- (input_value$landsize - scales$Total_Area$mean)/scales$Total_Area$sd
# test_query <- test_query[1,c(sample(input_query$start_date,1),sample(input_query$end_date,1),input_value$crop,sample(input_query$total_geofenced_area,1),sample(input_query$nitrogen,1),sample(input_query$phosphorous,1),sample(input_query$potassiom,1),sample(input_query$moisture,1),sample(input_query$longitude,1),sample(input_query$latitude,1),sample(input_query$Total_Area,1),sample(input_query$temperatureMin,1),sample(input_query$temperatureMax,1),sample(input_query$visibilty,1),sample(input_query$precipIntensity,1))]
# test_query
modelname <- paste("model_",paste(input_value$crop),sep = "")
Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
test <- function(newvalue){
input_value <- newvalue
input_query <- scaled_data[crop_name == input_value$crop,]
set.seed(100)
test_query <- input_query[sample(nrow(input_query),1)]
# test_query$start_date <- sample(input_query$start_date,1)
# test_query$end_date <- sample(input_query$end_date,1)
# test_query$crop_name <- input_value$crop
# test_query$total_geofenced_area <- sample(input_query$total_geofenced_area,1)
# test_query$nitrogen <- sample(input_query$nitrogen,1)
# test_query$phosphorous <- sample(input_query$phosphorous,1)
# test_query$potassiom <- sample(input_query$potassiom,1)
# test_query$moisture <- sample(input_query$moisture,1)
# test_query$longitude <- sample(input_query$longitude,1)
# test_query$latitude <- sample(input_query$latitude,1)
# test_query$Total_Area <- sample(input_query$Total_Area,1)
# test_query$temperatureMin <- sample(input_query$temperatureMin,1)
# test_query$temperatureMax <- sample(input_query$temperatureMax,1)
# test_query$visibilty <- sample(input_query$visibilty,1)
# test_query$precipIntensity <- sample(input_query$precipIntensity,1)
test_query$Yield_Generated <- NULL
test_query$Total_Area <- (input_value$landsize - scales$Total_Area$mean)/scales$Total_Area$sd
# test_query <- test_query[1,c(sample(input_query$start_date,1),sample(input_query$end_date,1),input_value$crop,sample(input_query$total_geofenced_area,1),sample(input_query$nitrogen,1),sample(input_query$phosphorous,1),sample(input_query$potassiom,1),sample(input_query$moisture,1),sample(input_query$longitude,1),sample(input_query$latitude,1),sample(input_query$Total_Area,1),sample(input_query$temperatureMin,1),sample(input_query$temperatureMax,1),sample(input_query$visibilty,1),sample(input_query$precipIntensity,1))]
# test_query
modelname <- paste("model_",paste(input_value$crop),sep = "")
Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
#Generating Formula for linear regression equation
View(scaled_data)
model <- lm(Yield_Generated ~ .-crop_name,data = scaled_data)
allvifs <- car::vif(model)
car::vif(model)
#Checking statistical significance and multicollinearity
all_vars <- names(model[[1]])[-1]  # names of all X variables
# Get the non-significant vars
summ <- summary(model)  # model summary
pvals <- summ[[4]][, 4]  # get all p values
not_significant <-
character()  # init variables that aren't statsitically significant
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]  # remove 'intercept'. Optional!
# If there are any non-significant variables,
while (length(not_significant) > 0) {
all_vars <- all_vars[!all_vars %in% not_significant[1]]
myForm <-
as.formula(paste("Yield_Generated ~ ", paste (all_vars, collapse = " + "), sep =
""))  # new formula
model <-
lm(myForm, data = scaled_data)  # re-build model with new formula
# Get the non-significant vars.
summ <- summary(model)
pvals <- summ[[4]][, 4]
not_significant <- character()
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]
}
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
#Generating Formula for linear regression equation
View(scaled_data)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
model <- lm(Yield_Generated ~ .-crop_name,data = scaled_data)
allvifs <- car::vif(model)
car::vif(model)
#Checking statistical significance and multicollinearity
all_vars <- names(model[[1]])[-1]  # names of all X variables
# Get the non-significant vars
summ <- summary(model)  # model summary
pvals <- summ[[4]][, 4]  # get all p values
not_significant <-
character()  # init variables that aren't statsitically significant
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]  # remove 'intercept'. Optional!
# If there are any non-significant variables,
while (length(not_significant) > 0) {
all_vars <- all_vars[!all_vars %in% not_significant[1]]
myForm <-
as.formula(paste("Yield_Generated ~ ", paste (all_vars, collapse = " + "), sep =
""))  # new formula
model <-
lm(myForm, data = scaled_data)  # re-build model with new formula
# Get the non-significant vars.
summ <- summary(model)
pvals <- summ[[4]][, 4]
not_significant <- character()
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]
}
summary(model)
#Correleation Between Attributes
library(corrplot)
df_correlation <-as.data.frame(scaled_data)
df_correlation <- df_correlation[, sapply(df_correlation, is.numeric)]
View(df_correlation)
corrplot(
cor(df_correlation),
method = "pie",
type = "upper",
details = FALSE
)
#Creating different data frame and model for different crop.
for(i in unique(scaled_data$crop_name)){
assign(paste("crop_name_",paste(i),sep = ""),subset.data.frame(scaled_data, crop_name == paste(i)))
assign(paste("model_",paste(i),sep = ""),lm(myForm, data = subset.data.frame(scaled_data, crop_name == paste(i))))
}
test <- function(newvalue){
input_value <- newvalue
input_query <- scaled_data[crop_name == input_value$crop,]
set.seed(100)
test_query <- input_query[sample(nrow(input_query),1)]
# test_query$start_date <- sample(input_query$start_date,1)
# test_query$end_date <- sample(input_query$end_date,1)
# test_query$crop_name <- input_value$crop
# test_query$total_geofenced_area <- sample(input_query$total_geofenced_area,1)
# test_query$nitrogen <- sample(input_query$nitrogen,1)
# test_query$phosphorous <- sample(input_query$phosphorous,1)
# test_query$potassiom <- sample(input_query$potassiom,1)
# test_query$moisture <- sample(input_query$moisture,1)
# test_query$longitude <- sample(input_query$longitude,1)
# test_query$latitude <- sample(input_query$latitude,1)
# test_query$Total_Area <- sample(input_query$Total_Area,1)
# test_query$temperatureMin <- sample(input_query$temperatureMin,1)
# test_query$temperatureMax <- sample(input_query$temperatureMax,1)
# test_query$visibilty <- sample(input_query$visibilty,1)
# test_query$precipIntensity <- sample(input_query$precipIntensity,1)
test_query$Yield_Generated <- NULL
test_query$Total_Area <- (input_value$landsize - scales$Total_Area$mean)/scales$Total_Area$sd
# test_query <- test_query[1,c(sample(input_query$start_date,1),sample(input_query$end_date,1),input_value$crop,sample(input_query$total_geofenced_area,1),sample(input_query$nitrogen,1),sample(input_query$phosphorous,1),sample(input_query$potassiom,1),sample(input_query$moisture,1),sample(input_query$longitude,1),sample(input_query$latitude,1),sample(input_query$Total_Area,1),sample(input_query$temperatureMin,1),sample(input_query$temperatureMax,1),sample(input_query$visibilty,1),sample(input_query$precipIntensity,1))]
# test_query
modelname <- paste("model_",paste(input_value$crop),sep = "")
Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
myForm
summary(scaled_data)
model <- lm(Yield_Generated ~ .-crop_name,data = scaled_data)
summary(model)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
library(tidytext)
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
get_sentiments("afinn")
get_sentiments("bing")
df <- as.dataframe(get_sentiments("bing"))
df <- get_sentiments("bing")
df <- get_sentiments("bing")
df
write.csv(df, file = 'sentimentdata.csv')
write.csv(df, file = 'sentimentdata.csv')
model <- lm(Yield_Generated ~ .-crop_name,data = scaled_data)
allvifs <- car::vif(model)
car::vif(model)
#Checking statistical significance and multicollinearity
all_vars <- names(model[[1]])[-1]  # names of all X variables
# Get the non-significant vars
summ <- summary(model)  # model summary
pvals <- summ[[4]][, 4]  # get all p values
not_significant <-
character()  # init variables that aren't statsitically significant
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]  # remove 'intercept'. Optional!
# If there are any non-significant variables,
while (length(not_significant) > 0) {
all_vars <- all_vars[!all_vars %in% not_significant[1]]
myForm <-
as.formula(paste("Yield_Generated ~ ", paste (all_vars, collapse = " + "), sep =
""))  # new formula
model <-
lm(myForm, data = scaled_data)  # re-build model with new formula
# Get the non-significant vars.
summ <- summary(model)
pvals <- summ[[4]][, 4]
not_significant <- character()
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]
}
#Correleation Between Attributes
library(corrplot)
df_correlation <-as.data.frame(scaled_data)
df_correlation <- df_correlation[, sapply(df_correlation, is.numeric)]
View(df_correlation)
corrplot(
cor(df_correlation),
method = "pie",
type = "upper",
details = FALSE
)
#Creating the Train & Test Data
testmodel <- scaled_data[sample(nrow(scaled_data),1), ]
check <-testmodel$Yield_Generated
testmodel$Yield_Generated <- NULL
View(testmodel)
set.seed(100)  # setting seed to reproduce results of random sampling
trainingRowIndex <-
sample(1:nrow(scaled_data), 0.8 * nrow(scaled_data))  # row indices for training data
trainingData <-
scaled_data1[trainingRowIndex,]  # model training data
testData  <- scaled_data1[-trainingRowIndex,]
#Linear Regression
fit1 <- lm(Yield_Generated ~ ., data = scaled_data)
#Stepwise Regression
selectedfit1 <- step(fit1)
# trainingData1 <- filter(trainingData,crop_name == "Cotton")
# dim(traingData1)
View(trainingData)
summary(trainingData)
# Build the model on training data -
fit1 <- lm(Yield_Generated ~ . - crop_name, data = trainingData)
Pred <- predict(fit1, testData)
par(mar = c(1, 1, 1, 1))
plot(Pred)
summary(fit1)
#Finding Correlation Between Actual Data & Predicted Data
actualacc <-
data.frame(cbind(actuals = testData$Yield_Generated, Predicteds = Pred))
correlation_accuracy <- cor(actualacc)
correlation_accuracy
predictions <-  fit1 %>% predict(testData)
# Model performance
data.frame(
RMSE = rmse(predictions, testData$Yield_Generated),
R2 = R2(predictions, testData$Yield_Generated)
)
#Loading the required libraries and setting initial parameters#
# Setting the Work Directory
setwd(
"C:\\Users\\hp\\Downloads\\RoughWork\\time-series-forecating-master\\AgricultureForecasting/"
)
needed_libs <- c("xlsx","readxl","dplyr","ggplot2","psych","Metrics","caret","DMwR","plyr","jsonlite","dataPreparation")
install_missing <- function(lib) {
install.packages(lib, repos = "https://cran.r-project.org/", dependencies = TRUE)
library(lib, character.only = TRUE)
}
#Installing libraries in a batch
for (lib in needed_libs){
tryCatch(
library(lib, character.only = TRUE),
error = function(e)
install_missing(lib)
)
}
#Creating different data frame and model for different crop.
for(i in unique(scaled_data$crop_name)){
assign(paste("crop_name_",paste(i),sep = ""),subset.data.frame(scaled_data, crop_name == paste(i)))
assign(paste("model_",paste(i),sep = ""),lm(myForm, data = subset.data.frame(scaled_data, crop_name == paste(i))))
}
test <- function(newvalue){
input_value <- newvalue
input_query <- scaled_data[crop_name == input_value$crop,]
set.seed(100)
test_query <- input_query[sample(nrow(input_query),1)]
# test_query$start_date <- sample(input_query$start_date,1)
# test_query$end_date <- sample(input_query$end_date,1)
# test_query$crop_name <- input_value$crop
# test_query$total_geofenced_area <- sample(input_query$total_geofenced_area,1)
# test_query$nitrogen <- sample(input_query$nitrogen,1)
# test_query$phosphorous <- sample(input_query$phosphorous,1)
# test_query$potassiom <- sample(input_query$potassiom,1)
# test_query$moisture <- sample(input_query$moisture,1)
# test_query$longitude <- sample(input_query$longitude,1)
# test_query$latitude <- sample(input_query$latitude,1)
# test_query$Total_Area <- sample(input_query$Total_Area,1)
# test_query$temperatureMin <- sample(input_query$temperatureMin,1)
# test_query$temperatureMax <- sample(input_query$temperatureMax,1)
# test_query$visibilty <- sample(input_query$visibilty,1)
# test_query$precipIntensity <- sample(input_query$precipIntensity,1)
test_query$Yield_Generated <- NULL
test_query$Total_Area <- (input_value$landsize - scales$Total_Area$mean)/scales$Total_Area$sd
# test_query <- test_query[1,c(sample(input_query$start_date,1),sample(input_query$end_date,1),input_value$crop,sample(input_query$total_geofenced_area,1),sample(input_query$nitrogen,1),sample(input_query$phosphorous,1),sample(input_query$potassiom,1),sample(input_query$moisture,1),sample(input_query$longitude,1),sample(input_query$latitude,1),sample(input_query$Total_Area,1),sample(input_query$temperatureMin,1),sample(input_query$temperatureMax,1),sample(input_query$visibilty,1),sample(input_query$precipIntensity,1))]
# test_query
modelname <- paste("model_",paste(input_value$crop),sep = "")
Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
library(plumber)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
model <- lm(Yield_Generated ~ .-crop_name,data = scaled_data)
allvifs <- car::vif(model)
car::vif(model)
#Checking statistical significance and multicollinearity
all_vars <- names(model[[1]])[-1]  # names of all X variables
# Get the non-significant vars
summ <- summary(model)  # model summary
pvals <- summ[[4]][, 4]  # get all p values
not_significant <-
character()  # init variables that aren't statsitically significant
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]  # remove 'intercept'. Optional!
# If there are any non-significant variables,
while (length(not_significant) > 0) {
all_vars <- all_vars[!all_vars %in% not_significant[1]]
myForm <-
as.formula(paste("Yield_Generated ~ ", paste (all_vars, collapse = " + "), sep =
""))  # new formula
model <-
lm(myForm, data = scaled_data)  # re-build model with new formula
# Get the non-significant vars.
summ <- summary(model)
pvals <- summ[[4]][, 4]
not_significant <- character()
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]
}
summary(model)
#Creating different data frame and model for different crop.
for(i in unique(scaled_data$crop_name)){
assign(paste("crop_name_",paste(i),sep = ""),subset.data.frame(scaled_data, crop_name == paste(i)))
assign(paste("model_",paste(i),sep = ""),lm(myForm, data = subset.data.frame(scaled_data, crop_name == paste(i))))
}
test <- function(newvalue){
input_value <- newvalue
input_query <- scaled_data[crop_name == input_value$crop,]
set.seed(100)
test_query <- input_query[sample(nrow(input_query),1)]
# test_query$start_date <- sample(input_query$start_date,1)
# test_query$end_date <- sample(input_query$end_date,1)
# test_query$crop_name <- input_value$crop
# test_query$total_geofenced_area <- sample(input_query$total_geofenced_area,1)
# test_query$nitrogen <- sample(input_query$nitrogen,1)
# test_query$phosphorous <- sample(input_query$phosphorous,1)
# test_query$potassiom <- sample(input_query$potassiom,1)
# test_query$moisture <- sample(input_query$moisture,1)
# test_query$longitude <- sample(input_query$longitude,1)
# test_query$latitude <- sample(input_query$latitude,1)
# test_query$Total_Area <- sample(input_query$Total_Area,1)
# test_query$temperatureMin <- sample(input_query$temperatureMin,1)
# test_query$temperatureMax <- sample(input_query$temperatureMax,1)
# test_query$visibilty <- sample(input_query$visibilty,1)
# test_query$precipIntensity <- sample(input_query$precipIntensity,1)
test_query$Yield_Generated <- NULL
test_query$Total_Area <- (input_value$landsize - scales$Total_Area$mean)/scales$Total_Area$sd
# test_query <- test_query[1,c(sample(input_query$start_date,1),sample(input_query$end_date,1),input_value$crop,sample(input_query$total_geofenced_area,1),sample(input_query$nitrogen,1),sample(input_query$phosphorous,1),sample(input_query$potassiom,1),sample(input_query$moisture,1),sample(input_query$longitude,1),sample(input_query$latitude,1),sample(input_query$Total_Area,1),sample(input_query$temperatureMin,1),sample(input_query$temperatureMax,1),sample(input_query$visibilty,1),sample(input_query$precipIntensity,1))]
# test_query
modelname <- paste("model_",paste(input_value$crop),sep = "")
Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
#' Forecast the Yield of Crop.
#'@param crop Enter the Crop name.
#'@param location Enter the Location where crop is present.
#'@param landsize Enter the land Size.
#'@post /value
#'@json
function(crop , location , landsize) {
landsize <- as.numeric(landsize)
newvalue = data.frame(crop,location,landsize)
if(newvalue$crop %in% unique_crop_name){
test(newvalue)
}
else{
print("Incorrect crop name or location")
}
}
library(plumber)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
model <- lm(Yield_Generated ~ .-crop_name,data = scaled_data)
allvifs <- car::vif(model)
car::vif(model)
#Checking statistical significance and multicollinearity
all_vars <- names(model[[1]])[-1]  # names of all X variables
# Get the non-significant vars
summ <- summary(model)  # model summary
pvals <- summ[[4]][, 4]  # get all p values
not_significant <-
character()  # init variables that aren't statsitically significant
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]  # remove 'intercept'. Optional!
# If there are any non-significant variables,
while (length(not_significant) > 0) {
all_vars <- all_vars[!all_vars %in% not_significant[1]]
myForm <-
as.formula(paste("Yield_Generated ~ ", paste (all_vars, collapse = " + "), sep =
""))  # new formula
model <-
lm(myForm, data = scaled_data)  # re-build model with new formula
# Get the non-significant vars.
summ <- summary(model)
pvals <- summ[[4]][, 4]
not_significant <- character()
not_significant <- names(which(pvals > 0.1))
not_significant <-
not_significant[!not_significant %in% "(Intercept)"]
}
#Creating different data frame and model for different crop.
for(i in unique(scaled_data$crop_name)){
assign(paste("crop_name_",paste(i),sep = ""),subset.data.frame(scaled_data, crop_name == paste(i)))
assign(paste("model_",paste(i),sep = ""),lm(myForm, data = subset.data.frame(scaled_data, crop_name == paste(i))))
}
test <- function(newvalue){
input_value <- newvalue
input_query <- scaled_data[crop_name == input_value$crop,]
set.seed(100)
test_query <- input_query[sample(nrow(input_query),1)]
# test_query$start_date <- sample(input_query$start_date,1)
# test_query$end_date <- sample(input_query$end_date,1)
# test_query$crop_name <- input_value$crop
# test_query$total_geofenced_area <- sample(input_query$total_geofenced_area,1)
# test_query$nitrogen <- sample(input_query$nitrogen,1)
# test_query$phosphorous <- sample(input_query$phosphorous,1)
# test_query$potassiom <- sample(input_query$potassiom,1)
# test_query$moisture <- sample(input_query$moisture,1)
# test_query$longitude <- sample(input_query$longitude,1)
# test_query$latitude <- sample(input_query$latitude,1)
# test_query$Total_Area <- sample(input_query$Total_Area,1)
# test_query$temperatureMin <- sample(input_query$temperatureMin,1)
# test_query$temperatureMax <- sample(input_query$temperatureMax,1)
# test_query$visibilty <- sample(input_query$visibilty,1)
# test_query$precipIntensity <- sample(input_query$precipIntensity,1)
test_query$Yield_Generated <- NULL
test_query$Total_Area <- (input_value$landsize - scales$Total_Area$mean)/scales$Total_Area$sd
# test_query <- test_query[1,c(sample(input_query$start_date,1),sample(input_query$end_date,1),input_value$crop,sample(input_query$total_geofenced_area,1),sample(input_query$nitrogen,1),sample(input_query$phosphorous,1),sample(input_query$potassiom,1),sample(input_query$moisture,1),sample(input_query$longitude,1),sample(input_query$latitude,1),sample(input_query$Total_Area,1),sample(input_query$temperatureMin,1),sample(input_query$temperatureMax,1),sample(input_query$visibilty,1),sample(input_query$precipIntensity,1))]
# test_query
modelname <- paste("model_",paste(input_value$crop),sep = "")
Yield_Prediction <- predict(get(modelname),test_query)
Yield_Prediction*scales$Yield_Generated$sd + scales$Yield_Generated$mean
}
#' Forecast the Yield of Crop.
#'@param crop Enter the Crop name.
#'@param location Enter the Location where crop is present.
#'@param landsize Enter the land Size.
#'@post /value
#'@json
function(crop , location , landsize) {
landsize <- as.numeric(landsize)
newvalue = data.frame(crop,location,landsize)
if(newvalue$crop %in% unique_crop_name){
test(newvalue)
}
else{
print("Incorrect crop name or location")
}
}
library(plumber)
pr <- plumb("Plumber.r")
pr$run(host = "127.0.0.1", port = 5050, swagger = T)
